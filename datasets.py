import numpy as np
import cv2
import os


class DataSet_Stage0():
	def __init__(self, image_path, names, poses, high, width, num_rays):
		self.image_path = image_path
		self.names = names
		self.poses = poses
		self.high = high
		self.width = width
		self.num_rays = num_rays
		self.num_train = len(poses)

	def create_iter_data(self):
		w_list, h_list = np.meshgrid(np.arange(self.width), np.arange(self.high))
		hw_list = np.reshape(np.stack([h_list, w_list], axis=-1), [-1, 2])
		indic, index = np.arange(self.num_train), 0
		pixels = np.arange(self.high * self.width)
		np.random.shuffle(indic)

		while True:
			if index >= self.num_train:
				np.random.shuffle(indic)
				index = 0

			choice = np.random.choice(pixels, size=self.num_rays, replace=False)

			image = cv2.imread(os.path.join(self.image_path, self.names[indic[index]]))
			image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB) / 255.

			coords = hw_list[choice].astype(np.int32)
			pose = self.poses[indic[index]].astype(np.float32)
			img_id = indic[index].astype(np.int32)
			image = image.astype(np.float32)
			index += 1

			yield coords, pose, img_id, image

	def get_iter_data(self):
		data_train = self.create_iter_data()
		return data_train, self.num_train


class DataSet_Stage1():
	def __init__(self, image_path, colors_m, batch_size):
		self.image_path = image_path
		self.colors_m = colors_m
		self.batch_size = batch_size
		self.data_dict = self.load_data_dict()

	def load_data_dict(self):
		names = sorted(os.listdir(self.colors_m))
		num_train = len(names)
		if num_train == 0: raise ValueError("Not found data generated by stage0!")
		data_dict = {"names": names, "num_train": num_train}
		return data_dict

	def create_iter_data(self):
		indic = np.arange(self.data_dict["num_train"])
		start, stop = 0, self.batch_size
		np.random.shuffle(indic)

		while True:
			if start >= self.data_dict["num_train"]:
				np.random.shuffle(indic)
				start, stop = 0, self.batch_size

			colors_f1, colors_gt = [], []

			for i in range(start, stop):
				index = i % self.data_dict["num_train"]
				name = self.data_dict["names"][indic[index]]

				color_f1 = cv2.cvtColor(cv2.imread(os.path.join(self.colors_m, name)), cv2.COLOR_BGR2RGB) / 255.
				color_gt = cv2.cvtColor(cv2.imread(os.path.join(self.image_path, name)), cv2.COLOR_BGR2RGB) / 255.

				colors_f1.append(color_f1)
				colors_gt.append(color_gt)

			colors_f1 = np.stack(colors_f1, axis=0).astype(np.float32)
			colors_gt = np.stack(colors_gt, axis=0).astype(np.float32)

			start += self.batch_size
			stop += self.batch_size

			yield colors_f1, colors_gt

	def get_iter_data(self):
		data_train = self.create_iter_data()
		num_train = self.data_dict["num_train"]
		return data_train, num_train


class DataSet_Test():
	def __init__(self, image_path, names, poses, high, width, num_rays):
		self.image_path = image_path
		self.names = names
		self.poses = poses
		self.high = high
		self.width = width
		self.num_rays = num_rays
		self.num_train = len(poses)

	def create_iter_data(self):
		w_list, h_list = np.meshgrid(np.arange(self.width), np.arange(self.high))
		hw_list = np.reshape(np.stack([h_list, w_list], axis=-1)[:, :(self.width//2)], [-1, 2])
		pixels = np.arange(self.high * (self.width//2))
		indic, index = np.arange(self.num_train), 0
		np.random.shuffle(indic)

		while True:
			if index >= self.num_train:
				np.random.shuffle(indic)
				index = 0

			image = cv2.imread(os.path.join(self.image_path, self.names[indic[index]]))
			image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB) / 255.

			choice = np.random.choice(pixels, size=self.num_rays, replace=False)

			coords = hw_list[choice].astype(np.int32)
			pose = self.poses[indic[index]].astype(np.float32)
			img_id = indic[index].astype(np.int32)
			image = image.astype(np.float32)
			index += 1

			yield coords, pose, img_id, image

	def get_iter_data(self):
		data_train = self.create_iter_data()
		return data_train, self.num_train