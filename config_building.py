import configargparse

def get_configs():
	parser = configargparse.ArgParser(config_file_parser_class=configargparse.YAMLConfigFileParser)
	parser.add_argument("--mode", type=str, default="planes", choices=["earth", "planes"], help="space mode select")
	parser.add_argument("--data", type=str, default="building", choices=["data", "google", "building", "rubble",
		"residence", "campus"], help="dataset select")
	parser.add_argument("--num_rays", type=int, default=2048, help="number of rays or pixels for each iter")
	parser.add_argument("--num_rays_test", type=int, default=16384, help="number of rays or pixels for testing")
	parser.add_argument("--inters_proposal", type=int, default=64, help="number of inters in inters proposal")
	parser.add_argument("--inters_property", type=int, default=128, help="number of inters in get_inters_property")
	parser.add_argument("--batch_size", type=int, default=2, help="batch_size in cnn refinement")
	parser.add_argument("--hash_base", type=int, default=256, help="init resolution in voxel grid")
	parser.add_argument("--hash_finest", type=int, default=8192, help="final resolution in voxel grid, priority > hash_scale")
	parser.add_argument("--hash_scale", type=float, default=1.4, help="up scale of voxel grid, priority < hash_finest")
	parser.add_argument("--hash_levels", type=int, default=16, help="number of hash tables")
	parser.add_argument("--units_ngp", type=int, default=4, help="units per level in hash table")
	parser.add_argument("--hash_size", type=int, default=22, help="hash table size: 2**x")
	parser.add_argument("--grid_x", type=int, default=2, help="number of space split in x axis")
	parser.add_argument("--grid_y", type=int, default=4, help="number of space split in y axis")
	parser.add_argument("--max_rays", type=int, default=1100*1000*2048, help="max rays for training in stage 0")
	parser.add_argument("--max_images", type=int, default=100*1000*2, help="max images for training in stage 1")
	parser.add_argument("--max_rays_test", type=int, default=150*1000*2048, help="max rays for get embedding on testing")
	parser.add_argument("--lr_nerf", type=float, default=1e-4, help="init learning rate in stage 0")
	parser.add_argument("--lr_cnn", type=float, default=1e-4, help="init learning rate in stage 1")
	parser.add_argument("--saves_min", type=int, default=5, help="min number of models to save in training for each stage")
	parser.add_argument("--units_nerf", type=int, default=128, help="hidden units in mlp of hash grid")
	parser.add_argument("--units_dec", type=int, default=256, help="hidden units in mlp of depth correct")
	parser.add_argument("--units_ger", type=int, default=64, help="hidden units in mlp of get_range")
	parser.add_argument("--units_mlp", type=int, default=512, help="hidden units in mlp of texture refinement")
	parser.add_argument("--units_cnn", type=int, default=32, help="hidden units in cnn of image refinement")
	parser.add_argument("--pos_levels", type=int, default=12, help="levels of position encoding")
	parser.add_argument("--poi_levels", type=int, default=12, help="levels of points encoding")
	parser.add_argument("--dir_levels", type=int, default=4, help="levels of direction encoding")
	parser.add_argument("--appearance", type=bool, default=True, help="add appearance embeddings or not")
	parser.add_argument("--app_dims", type=int, default=48, help="dims of per image appearance embeddings")
	parser.add_argument("--stride_stage1", type=int, default=3, help="stride for saved images to training stage1")
	return parser.parse_args()